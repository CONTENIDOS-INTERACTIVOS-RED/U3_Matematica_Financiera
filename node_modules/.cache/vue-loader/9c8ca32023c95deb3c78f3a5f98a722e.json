{"remainingRequest":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/src/views/curso/Tema3.vue?vue&type=template&id=8ff8db32&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/src/views/curso/Tema3.vue","mtime":1742012000880},{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Matematica_Financiera/U3_Matematica_Financiera/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gRm9ybXVsYWNpw7NuIGZpbmFuY2llcmEgZW4gRXhjZWwnIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTcubWItMwogICAgICAucC00LnAtbWQtNQogICAgICAgIHAubWItNCBQYXJhIGNvbm9jZXIgc29icmUgbGEgdGVtw6F0aWNhLCBsbyBpbnZpdGFtb3MgYSBlc2N1Y2hhciBlbCBzaWd1aWVudGUgcG9kY2FzdC4KCiAgICAgIAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IFBhcmEgY29ub2NlciBzb2JyZSBsb3MgZnVuZGFtZW50b3MgZGUgbGEgaW5ub3ZhY2nDs24gZXN0cmF0w6lnaWNhLCBsbyBpbnZpdGFtb3MgYSBlc2N1Y2hhciBlbCBzaWd1aWVudGUgcG9kY2FzdC4KICAgIAogICAgICAgICAgICBUYXJqZXRhQXVkaW8uY29sb3ItYWNlbnRvLWJvdG9uZXMuYmctY29sb3Itd2hpdGUubWItMygKICAgICAgICAgICAgICB0ZXh0bz0iRnVuZGFtZW50b3MgZGUgbGEgaW5ub3ZhY2nDs24gZXN0cmF0w6lnaWNhIgogICAgICAgICAgICAgIHRpZW1wbwogICAgICAgICAgICAgIDphdWRpbz0icmVxdWlyZSgnLi4vLi4vYXNzZXRzL2N1cnNvL3BvZGNhc3QvcG9kY2FzdDEubXAzJykiCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICkKICAgIAogICAgcC5tYi00IEVuIGVzdGEgc2VjY2nDs24sIHNlIGV4cGxvcmFyw6EgY8OzbW8gYXBsaWNhciBFeGNlbCBhIGxvcyBwcmluY2lwYWxlcyB0ZW1hcyBhYm9yZGFkb3MgZW4gZWwgY3Vyc28sIHByb3BvcmNpb25hbmRvIGV4cGxpY2FjaW9uZXMgY2xhcmFzIHkgZWplbXBsb3MgZGV0YWxsYWRvcyBwYXJhIGNvbXByZW5kZXIgeSBhcGxpY2FyIGVzdGFzIGhlcnJhbWllbnRhcyBlbiBzaXR1YWNpb25lcyByZWFsZXMuIFNlIGFib3JkYXLDoW4gY2Fzb3MgcHLDoWN0aWNvcyBxdWUgcGVybWl0aXLDoW4gZGVzYXJyb2xsYXIgaGFiaWxpZGFkZXMgZW4gZWwgdXNvIGRlIGZ1bmNpb25lcyBmaW5hbmNpZXJhcywgY29uc3RydWNjacOzbiBkZSBtb2RlbG9zIGRlIGFuw6FsaXNpcyB5IG9wdGltaXphY2nDs24gZGUgcHJvY2Vzb3MsIGNvbiBlbCBvYmpldGl2byBkZSBtZWpvcmFyIGxhIHByZWNpc2nDs24gZW4gbGEgdG9tYSBkZSBkZWNpc2lvbmVzIHkgZmFjaWxpdGFyIGxhIGludGVycHJldGFjacOzbiBkZSBpbmZvcm1hY2nDs24gZmluYW5jaWVyYSBlbiBkaXN0aW50b3MgY29udGV4dG9zLgoKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1wcmltYXJpby5sYXJnZShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGRpdihudW1lcm89IjEiIHRpdHVsbz0iQ8OhbGN1bG8gZGVsIFZhbG9yIFByZXNlbnRlIGVuIEV4Y2VsIikKICAgICAgICAgICAgcCBQYXJhIGNhbGN1bGFyIGVsIFZQIGVuIEV4Y2VsLCB1c2Ftb3MgbGEgZnVuY2nDs24gVkEoKSAoVmFsb3IgQWN0dWFsKToKICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA9VkEodGFzYSwgbnBlciwgcGFnbywgVkYsIHRpcG8pCiAgICAgICAgICAgIHAgRG9uZGU6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCB0YXNhOiBUYXNhIGRlIGludGVyw6lzIG8gZGVzY3VlbnRvIHBvciBwZXLDrW9kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgbnBlcjogTsO6bWVybyBkZSBwZXLDrW9kb3MgbyBhw7Fvcy4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgcGFnbzogRmx1am8gZGUgZWZlY3Rpdm8gcGVyacOzZGljbyAoc2kgYXBsaWNhKS4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgVkY6IFZhbG9yIGZ1dHVybyBlc3BlcmFkby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgdGlwbzogMCAoc2kgbG9zIHBhZ29zIG9jdXJyZW4gYWwgZmluYWwgZGVsIHBlcsOtb2RvKSBvIDEgKHNpIG9jdXJyZW4gYWwgaW5pY2lvKS4KICAgICAgICAgICAgaDUgRWplbXBsbzogCiAgICAgICAgICAgIHAgVW5hIHBlcnNvbmEgcGxhbmVhIHJlY2liaXIgJDUwLDAwMCBlbiA1IGHDsW9zLiBRdWllcmUgc2FiZXIgY3XDoW50byBuZWNlc2l0YSBob3kgc2kgbGEgdGFzYSBkZSBkZXNjdWVudG8gZXMgOCAlIGFudWFsLiBFbiBFeGNlbCwgdXNhIGxhIGZ1bmNpw7NuIFZBKCk6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVZBKDggJSwgNSwgMCwgNTAwMDApIAogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyAzNCwwMzIuIEVzIGRlY2lyLCBzaSBob3kgaW52aWVydGUgcyAkMzQsMDMyIGNvbiB1bmEgdGFzYSBkZWwgOCAlIGFudWFsLCBlbiA1IGHDsW9zIHRlbmRyw6EgJDUwLDAwMC4KICAgICAgICAgIGRpdihudW1lcm89IjIiIHRpdHVsbz0iQ8OhbGN1bG8gZGVsIFZhbG9yIEZ1dHVybyBlbiBFeGNlbCIpIAogICAgICAgICAgICBwIFBhcmEgY2FsY3VsYXIgZWwgVkYgZW4gRXhjZWwsIHVzYW1vcyBsYSBmdW5jacOzbiBWRigpIChWYWxvciBGdXR1cm8pLgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1WRih0YXNhLCBucGVyLCBwYWdvLCBWQSwgdGlwbykKICAgICAgICAgICAgcCBEb25kZToKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRhc2E6IFRhc2EgZGUgaW50ZXLDqXMgbyBjcmVjaW1pZW50byBhbnVhbC4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgbnBlcjogTsO6bWVybyBkZSBwZXLDrW9kb3MgbyBhw7Fvcy4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgcGFnbzogUGFnbyBwZXJpw7NkaWNvIChzaSBhcGxpY2EpLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCBWQTogVmFsb3IgcHJlc2VudGUgbyBpbnZlcnNpw7NuIGluaWNpYWwuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRpcG86IDAgKHNpIGxvcyBwYWdvcyBvY3VycmVuIGFsIGZpbmFsKSBvIDEgKHNpIG9jdXJyZW4gYWwgaW5pY2lvKS4KICAgICAgICAgICAgaDUgRWplbXBsbzogCiAgICAgICAgICAgIHAgVW4gaW52ZXJzaW9uaXN0YSBkZXBvc2l0YSAkMTAsMDAwIGhveSBlbiB1bmEgY3VlbnRhIGNvbiB1bmEgdGFzYSBkZSBpbnRlcsOpcyBjb21wdWVzdGEgZGVsIDYgJSBhbnVhbCBwb3IgMTAgYcOxb3MuIFF1aWVyZSBzYWJlciBjdcOhbnRvIHRlbmRyw6EgYWwgZmluYWwgZGVsIHBlcsOtb2RvLiBFbiBFeGNlbCwgdXNhIGxhIGZ1bmNpw7NuIFZGKCk6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVZGKDYgJSwgMTAsIDAsIC0xMDAwMCkgCiAgICAgICAgICAgIHAgRWwgcmVzdWx0YWRvIGVzIDE3LDkwOC4gRXMgZGVjaXIsIHNpIGhveSBpbnZpZXJ0ZXMgJDEwLDAwMCBjb24gdW5hIHRhc2EgZGVsIDYgJSBhbnVhbCwgZW4gMTAgYcOxb3MgdHUgaW52ZXJzacOzbiBjcmVjZXLDoSBhICQxNyw5MDguCiAgICAgICAgICBkaXYobnVtZXJvPSIyIiB0aXR1bG89IkPDoWxjdWxvIGRlIGFudWFsaWRhZGVzIGVuIEV4Y2VsIikgCiAgICAgICAgICAgIHAgUGFyYSBjYWxjdWxhciBlbCBwYWdvIHBlcmnDs2RpY28gKGN1b3RhKSBkZSB1bmEgYW51YWxpZGFkIGVuIEV4Y2VsLCB1c2Ftb3MgbGEgZnVuY2nDs24gUEFHTygpOgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1QQUdPKHRhc2EsIG5wZXIsIFZBLCBWRiwgdGlwbykKICAgICAgICAgICAgcCBEb25kZToKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRhc2EgPSBUYXNhIGRlIGludGVyw6lzIHBvciBwZXLDrW9kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgbnBlciA9IE7Dum1lcm8gdG90YWwgZGUgcGVyw61vZG9zLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCBWQSA9IFZhbG9yIGFjdHVhbCBkZWwgcHLDqXN0YW1vIG8gaW52ZXJzacOzbi4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgVkYgPSBWYWxvciBmdXR1cm8gZGUgbGEgYW51YWxpZGFkIChzaSBhcGxpY2EpLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCB0aXBvID0gMCAoc2kgbG9zIHBhZ29zIHNvbiBhbCBmaW5hbCBkZWwgcGVyw61vZG8pIG8gMSAoc2kgc29uIGFsIGluaWNpbykuCiAgICAgICAgICAgIGg1IEVqZW1wbG86IAogICAgICAgICAgICBwIFVuIHByw6lzdGFtbyBkZSAkMTAwLDAwMCBzZSBwYWdhcsOhIGVuIDUgYcOxb3MsIGNvbiB1bmEgdGFzYSBkZSAxMiAlIGFudWFsLCBlbiBwYWdvcyBtZW5zdWFsZXMuIEVuIEV4Y2VsOgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1QQUdPKDEyICUvMTIsIDYwLCAtMTAwMDAwKQogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyAyLDIyNC4gRXMgZGVjaXIsIHBhcmEgcGFnYXIgJDEwMCwwMDAgZW4gNSBhw7FvcyBjb24gdW5hIHRhc2EgZGVsIDEyICUsIHNlIGRlYmVuIGhhY2VyIHBhZ29zIG1lbnN1YWxlcyBkZSAkMiwyMjQuCgogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wLm9yZGVyLTEub3JkZXItbGctMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMi5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOC5vcmRlci0yLm9yZGVyLWxnLTEKICAgICAgICBMaW5lYVRpZW1wb0QuY29sb3ItcHJpbWFyaW8ubGFyZ2UoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBkaXYobnVtZXJvPSI0IiB0aXR1bG89IkPDoWxjdWxvIGRlbCBWYWxvciBQcmVzZW50ZSBkZSB1bmEgYW51YWxpZGFkIGVuIEV4Y2VsIikKICAgICAgICAgICAgcCBTaSBxdWllcmVzIHNhYmVyIGN1w6FudG8gZGluZXJvIG5lY2VzaXRhcyBob3kgcGFyYSByZWNpYmlyIHVuYSByZW50YSBwZXJpw7NkaWNhIGVuIGVsIGZ1dHVybywgdXNhIGxhIGZ1bmNpw7NuIFZBKCk6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVZBKHRhc2EsIG5wZXIsIHBhZ28sIFZGLCB0aXBvKQogICAgICAgICAgICBwIERvbmRlOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAg4oCiIHRhc2EgPSBUYXNhIGRlIGludGVyw6lzIHBvciBwZXLDrW9kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAg4oCiIG5wZXIgPSBOw7ptZXJvIHRvdGFsIGRlIHBlcsOtb2Rvcy4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAg4oCiIHBhZ28gPSBQYWdvIHBlcmnDs2RpY28uCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIOKAoiBWRiA9IFZhbG9yIGZ1dHVybyBkZSBsYSBhbnVhbGlkYWQgKHNpIGFwbGljYSkuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIOKAoiB0aXBvID0gMCAodmVuY2lkYSkgbyAxIChhbnRpY2lwYWRhKS4KICAgICAgICAgICAgaDUgRWplbXBsbzogCiAgICAgICAgICAgIHAgVW4gaW52ZXJzaW9uaXN0YSBxdWllcmUgcmVjaWJpciAkMiwwMDAgbWVuc3VhbGVzIGR1cmFudGUgMjAgYcOxb3MsIGNvbiB1bmEgdGFzYSBkZWwgOCAlIGFudWFsLiDCv0N1w6FudG8gZGluZXJvIGRlYmUgdGVuZXIgaG95PyBFbiBFeGNlbDoKICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA9VkEoOCUvMTIsIDI0MCwgLTIwMDApIAogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyAyMzgsNDc2LiBFcyBkZWNpciwgcGFyYSByZWNpYmlyICQyLDAwMCBtZW5zdWFsZXMgcG9yIDIwIGHDsW9zLCBuZWNlc2l0YXMgJDIzOCw0NzYgaG95LCBzaSBsYSB0YXNhIGRlIGludGVyw6lzIGVzIGRlbCA4ICUgYW51YWwuCiAgICAgICAgICBkaXYobnVtZXJvPSI1IiB0aXR1bG89IkPDoWxjdWxvIGRlbCBWYWxvciBGdXR1cm8gZGUgdW5hIGFudWFsaWRhZCBlbiBFeGNlbCIpIAogICAgICAgICAgICBwIFNpIHF1aWVyZXMgc2FiZXIgY3XDoW50byB0ZW5kcsOhcyBlbiBlbCBmdXR1cm8gc2kgcmVhbGl6YXMgcGFnb3MgcGVyacOzZGljb3MsIHVzYSBsYSBmdW5jacOzbiBWRigpOgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1WRih0YXNhLCBucGVyLCBwYWdvLCBWQSwgdGlwbykKICAgICAgICAgICAgcCBEb25kZToKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRhc2EgPSBUYXNhIGRlIGludGVyw6lzIHBvciBwZXLDrW9kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgbnBlciA9IE7Dum1lcm8gdG90YWwgZGUgcGVyw61vZG9zLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCBwYWdvID0gUGFnbyBwZXJpw7NkaWNvLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCBWQSA9IFZhbG9yIHByZXNlbnRlIG8gaW52ZXJzacOzbiBpbmljaWFsLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCB0aXBvID0gMCAodmVuY2lkYSkgbyAxIChhbnRpY2lwYWRhKS4KICAgICAgICAgICAgaDUgRWplbXBsbzogCiAgICAgICAgICAgIHAgVW4gcGFkcmUgcXVpZXJlIGFob3JyYXIgJDUwMCBtZW5zdWFsZXMgZHVyYW50ZSAxOCBhw7FvcyBwYXJhIGxhIHVuaXZlcnNpZGFkIGRlIHN1IGhpam8uIExhIGN1ZW50YSBkZSBhaG9ycm8gZ2VuZXJhIHVuIDUgJSBhbnVhbCBjb21wdWVzdG8gbWVuc3VhbG1lbnRlLiDCv0N1w6FudG8gdGVuZHLDoSBhbCBmaW5hbD8gRW4gRXhjZWw6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVZGKDUlLzEyLCAyMTYsIC01MDApIAogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyAxNzksNTk3LiBFcyBkZWNpciwgU2kgYWhvcnJhcyAkNTAwIGFsIG1lcyBjb24gdW5hIHRhc2EgZGVsIDUgJSwgZGVzcHXDqXMgZGUgMTggYcOxb3MgdGVuZHLDoXMgJDE3OSw1OTcuCiAgICAgICAgICBkaXYobnVtZXJvPSI2IiB0aXR1bG89IkPDoWxjdWxvIGRlIGFtb3J0aXphY2nDs24gY29uIFBhZ29zIEFudGljaXBhZG9zIGVuIEV4Y2VsIikgCiAgICAgICAgICAgIHAgUGFyYSBlc3RlIHRpcG8gZGUgYW1vcnRpemFjacOzbiBlbiBFeGNlbCwgc2UgdXNhIGxhIGZ1bmNpw7NuIFBBR08oKSwgY29uIGVsIGFyZ3VtZW50byB0aXBvID0gMSAobG8gcXVlIGluZGljYSBxdWUgZWwgcGFnbyBzZSByZWFsaXphIGFsIGluaWNpbyBkZWwgcGVyw61vZG8pOgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1QQUdPKHRhc2EsIG5wZXIsIFZBLCBWRiwgMSkKICAgICAgICAgICAgcCBEb25kZToKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRhc2EgPSBUYXNhIGRlIGludGVyw6lzIHBvciBwZXLDrW9kbyAodGFzYSBhbnVhbCBkaXZpZGlkYSBwb3IgZWwgbsO6bWVybyBkZSBwYWdvcyBhbCBhw7FvKS4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgbnBlciA9IE7Dum1lcm8gdG90YWwgZGUgcGVyw61vZG9zIGRlIHBhZ28uCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIFZBID0gVmFsb3IgZGVsIHByw6lzdGFtbyBvIGNhcGl0YWwgaW5pY2lhbC4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgVkYgPSBWYWxvciBmdXR1cm8gZGVsIHByw6lzdGFtbyAoZ2VuZXJhbG1lbnRlIDAgc2kgc2UgYW1vcnRpemEgY29tcGxldGFtZW50ZSkuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRpcG8gPSAxIChJbmRpY2EgcXVlIGxvcyBwYWdvcyBzb24gYWwgaW5pY2lvIGRlbCBwZXLDrW9kbykuCiAgICAgICAgICAgIGg1IEVqZW1wbG86IAogICAgICAgICAgICBwIFVuIHByw6lzdGFtbyBkZSAkNTAsMDAwIHNlIHBhZ2Fyw6EgZW4gNSBhw7FvcywgY29uIHVuYSB0YXNhIGRlIDEwICUgYW51YWwsIGVuIHBhZ29zIHRyaW1lc3RyYWxlcy4gRW4gRXhjZWw6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVBBR08oMTAgJS80LCAyMCwgLTUwMDAwLCAwLCAxKQogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyAzLDE4NyBwb3IgdHJpbWVzdHJlLiBEYWRvIHF1ZSBsb3MgcGFnb3Mgc29uIGFudGljaXBhZG9zLCBsYSBjdW90YSBlcyBsaWdlcmFtZW50ZSBtZW5vciBxdWUgZW4gdW4gcHLDqXN0YW1vIGNvbiBwYWdvcyB2ZW5jaWRvcy4gRXN0byBzZSBkZWJlIGEgcXVlIGNhZGEgcGFnbyBzZSByZWFsaXphIGFudGVzIGRlIHF1ZSBzZSBhY3VtdWxlbiBtw6FzIGludGVyZXNlcywgcmVkdWNpZW5kbyBlbCBjb3N0byB0b3RhbCBkZWwgZmluYW5jaWFtaWVudG8uCiAgICAKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMy5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1wcmltYXJpby5sYXJnZShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGRpdihudW1lcm89IjciIHRpdHVsbz0iQ8OhbGN1bG8gZGVsIFZQTiBlbiBFeGNlbCIpCiAgICAgICAgICAgIHAgUGFyYSBjYWxjdWxhciBlbCBWYWxvciBQcmVzZW50ZSBOZXRvIGVuIEV4Y2VsLCBzZSB1dGlsaXphIGxhIGZ1bmNpw7NuIFZQTigpLCBxdWUgcGVybWl0ZSBkZXNjb250YXIgbG9zIGZsdWpvcyBkZSBlZmVjdGl2byBmdXR1cm9zIGEgc3UgdmFsb3IgcHJlc2VudGU6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVZQTih0YXNhLCBmbHVqbzEsIGZsdWpvMiwgLi4uLCBmbHVqb04pIC0gaW52ZXJzacOzbl9pbmljaWFsCiAgICAgICAgICAgIHAgRG9uZGU6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCB0YXNhID0gVGFzYSBkZSBkZXNjdWVudG8gbyBjb3N0byBkZSBjYXBpdGFsLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCBmbHVqbzEsIGZsdWpvMiwg4oCmLCBmbHVqb04gPSBGbHVqb3MgZGUgZWZlY3Rpdm8gZW4gY2FkYSBwZXLDrW9kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgaW52ZXJzacOzbl9pbmljaWFsID0gTW9udG8gZGUgbGEgaW52ZXJzacOzbiBpbmljaWFsIChzZSByZXN0YSBhbCByZXN1bHRhZG8gZGUgbGEgZnVuY2nDs24gVlBOKCkpLgogICAgICAgICAgICBoNSBFamVtcGxvOiAKICAgICAgICAgICAgcCBVbmEgZW1wcmVzYSBlc3TDoSBldmFsdWFuZG8gdW4gcHJveWVjdG8gcXVlIHJlcXVpZXJlIHVuYSBpbnZlcnNpw7NuIGluaWNpYWwgZGUgJDUwLDAwMCB5IGdlbmVyYXLDoSBsb3Mgc2lndWllbnRlcyBmbHVqb3MgZGUgZWZlY3Rpdm8gYW51YWxlcyBkdXJhbnRlIDQgYcOxb3MsIGNvbiB1bmEgdGFzYSBkZSBkZXNjdWVudG8gZGVsIDEwICUgYW51YWw6CiAgICAgICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTMKICAgICAgICAgICAgICB0YWJsZQogICAgICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEHDsW8KICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEZsdWpvIGRlIEVmZWN0aXZvICgkKQogICAgICAgICAgICAgICAgdGJvZHkKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDEKICAgICAgICAgICAgICAgICAgICB0ZCAxNSwwMDAKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDIKICAgICAgICAgICAgICAgICAgICB0ZCAxOCwwMDAKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDMKICAgICAgICAgICAgICAgICAgICB0ZCAyMCwwMDAKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDQKICAgICAgICAgICAgICAgICAgICB0ZCAyNSwwMDAKICAgICAgICAgICAgcCBBbCBjcmVhciBsYSB0YWJsYSBlbiBFeGNlbCwgc2UgYXBsaWNhIGxhIHNpZ3VpZW50ZSBmw7NybXVsYToKICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA9VlBOKDEwJSwgMTUwMDAsIDE4MDAwLCAyMDAwMCwgMjUwMDApIOKAkyA1MDAwMAogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyA2LDIwMi4gRXMgZGVjaXIsIEVsIFZQTiBlcyBwb3NpdGl2bywgbG8gcXVlIGluZGljYSBxdWUgZWwgcHJveWVjdG8gZXMgcmVudGFibGUgeSBnZW5lcmFyw6EgdW4gdmFsb3IgYWRpY2lvbmFsIGRlICQ2LDIwMiBzb2JyZSBsYSBpbnZlcnNpw7NuIGluaWNpYWwuCiAgICAgICAgICBkaXYobnVtZXJvPSI4IiB0aXR1bG89IkPDoWxjdWxvIGRlIGxhIFRJUiBlbiBFeGNlbCIpIAogICAgICAgICAgICBwIFBhcmEgY2FsY3VsYXIgbGEgVGFzYSBJbnRlcm5hIGRlIFJldG9ybm8gKFRJUikgZW4gRXhjZWwsIHNlIHV0aWxpemEgbGEgZnVuY2nDs24gVElSKCksIHF1ZSBidXNjYSBsYSB0YXNhIHF1ZSBoYWNlIHF1ZSBlbCBWUE4gc2VhIGlndWFsIGEgY2VybzoKICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA9VElSKHJhbmdvX2ZsdWpvcykKICAgICAgICAgICAgcCBEb25kZToKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHJhbmdvX2ZsdWpvcyA9IFJhbmdvIGRlIGNlbGRhcyBxdWUgY29udGllbmUgbG9zIGZsdWpvcyBkZSBlZmVjdGl2byBkZWwgcHJveWVjdG8sIGluY2x1eWVuZG8gbGEgaW52ZXJzacOzbiBpbmljaWFsIChuZWdhdGl2YSkuCiAgICAgICAgICAgIGg1IEVqZW1wbG86IAogICAgICAgICAgICBwIFVuYSBlbXByZXNhIGVzdMOhIGV2YWx1YW5kbyB1biBwcm95ZWN0byBxdWUgcmVxdWllcmUgdW5hIGludmVyc2nDs24gaW5pY2lhbCBkZSAkNTAsMDAwIHkgZ2VuZXJhcsOhIGxvcyBzaWd1aWVudGVzIGZsdWpvcyBkZSBlZmVjdGl2byBkdXJhbnRlIDQgYcOxb3M6CiAgICAgICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTMKICAgICAgICAgICAgICB0YWJsZQogICAgICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEHDsW8KICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEZsdWpvIGRlIEVmZWN0aXZvICgkKQogICAgICAgICAgICAgICAgdGJvZHkKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDAKICAgICAgICAgICAgICAgICAgICB0ZCAtNTAsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAxCiAgICAgICAgICAgICAgICAgICAgdGQgMTUsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAyCiAgICAgICAgICAgICAgICAgICAgdGQgMTgsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAzCiAgICAgICAgICAgICAgICAgICAgdGQgMjAsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCA0CiAgICAgICAgICAgICAgICAgICAgdGQgMjUsMDAwCiAgICAgICAgICAgIHAgQWwgY3JlYXIgbGEgdGFibGEgZW4gRXhjZWwgc2UgYXBsaWNhIGxhIHNpZ3VpZW50ZSBmw7NybXVsYToKICAgICAgICAgICAgcC50ZXh0LWNlbnRlciA9VElSKEEyOkE2KSAKICAgICAgICAgICAgcCBFbCByZXN1bHRhZG8gZXMgMTMuNDcgJS4gRXMgZGVjaXIsIGxhIFRJUiBkZWwgcHJveWVjdG8gZXMgMTMuNDcgJSwgbG8gcXVlIHNpZ25pZmljYSBxdWUgZXN0ZSBwcm95ZWN0byBnZW5lcmFyw6EgdW4gcmVuZGltaWVudG8gZGVsIDEzLjQ3ICUgYW51YWwuIFNpIGxhIHRhc2EgZGUgZGVzY3VlbnRvIGRlIGxhIGVtcHJlc2EgZXMgbWVub3IgYSBlc3RlIHZhbG9yLCBlbCBwcm95ZWN0byBlcyByZW50YWJsZSB5IGRlYmVyw61hIGFwcm9iYXJzZS4KICAgICAgICAgIGRpdihudW1lcm89IjkiIHRpdHVsbz0iQ8OhbGN1bG8gZGUgbGEgVElSQSBlbiBFeGNlbCIpIAogICAgICAgICAgICBwIFBhcmEgY2FsY3VsYXIgbGEgVGFzYSBJbnRlcm5hIGRlIFJldG9ybm8gQWp1c3RhZGEgKFRJUkEpIGVuIEV4Y2VsLCBzZSB1c2EgbGEgZnVuY2nDs24gVElSTSgpOgogICAgICAgICAgICBwLnRleHQtY2VudGVyID1USVJNKHJhbmdvX2ZsdWpvcywgdGFzYV9maW5hbmNpYW1pZW50bywgdGFzYV9yZWludmVyc2nDs24pCiAgICAgICAgICAgIHAgRG9uZGU6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTYKICAgICAgICAgICAgICAgIHAubWItMCByYW5nb19mbHVqb3MgPSBSYW5nbyBkZSBjZWxkYXMgY29uIGxvcyBmbHVqb3MgZGUgZWZlY3Rpdm8uCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItNgogICAgICAgICAgICAgICAgcC5tYi0wIHRhc2FfZmluYW5jaWFtaWVudG8gPSBUYXNhIGRlIGludGVyw6lzIGRlIGxhIGludmVyc2nDs24gaW5pY2lhbC4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci02CiAgICAgICAgICAgICAgICBwLm1iLTAgdGFzYV9yZWludmVyc2nDs24gPSBUYXNhIGRlIGludGVyw6lzIGNvbiBsYSBxdWUgc2UgcmVpbnZpZXJ0ZW4gbG9zIGZsdWpvcyBwb3NpdGl2b3MuCiAgICAgICAgICAgIGg1IEVqZW1wbG86IAogICAgICAgICAgICBwIFVuIGludmVyc2lvbmlzdGEgYW5hbGl6YSB1biBwcm95ZWN0byBjb24gdW5hIGludmVyc2nDs24gaW5pY2lhbCBkZSAkODAsMDAwIHkgbG9zIHNpZ3VpZW50ZXMgZmx1am9zIGRlIGVmZWN0aXZvIGR1cmFudGUgNSBhw7Fvcy4gTGEgdGFzYSBkZSBmaW5hbmNpYW1pZW50byBlcyA5ICUgeSBsYSB0YXNhIGRlIHJlaW52ZXJzacOzbiBkZSBsb3MgZmx1am9zIHBvc2l0aXZvcyBlcyA3ICUuCiAgICAgICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTMKICAgICAgICAgICAgICB0YWJsZQogICAgICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEHDsW8KICAgICAgICAgICAgICAgICAgICB0aC5iZy1jb2xvci01IEZsdWpvIGRlIEVmZWN0aXZvICgkKQogICAgICAgICAgICAgICAgdGJvZHkKICAgICAgICAgICAgICAgICAgdHIuYmctY29sb3ItNAogICAgICAgICAgICAgICAgICAgIHRkIDAKICAgICAgICAgICAgICAgICAgICB0ZCAtODAsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAxCiAgICAgICAgICAgICAgICAgICAgdGQgMjAsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAyCiAgICAgICAgICAgICAgICAgICAgdGQgMjIsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCAzCiAgICAgICAgICAgICAgICAgICAgdGQgMjUsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCA0CiAgICAgICAgICAgICAgICAgICAgdGQgMzAsMDAwCiAgICAgICAgICAgICAgICAgIHRyLmJnLWNvbG9yLTQKICAgICAgICAgICAgICAgICAgICB0ZCA1CiAgICAgICAgICAgICAgICAgICAgdGQgMzUsMDAwCiAgICAgICAgICAgIHAgQWwgY3JlYXIgbGEgdGFibGEgZW4gRXhjZWwsIHNlIGFwbGljYSBsYSBzaWd1aWVudGUgZsOzcm11bGE6CiAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgPVRJUk0oQTI6QTcsIDkgJSwgNyAlKQogICAgICAgICAgICBwIEVsIHJlc3VsdGFkbyBlcyA4Ljg1ICUuIEVzIGRlY2lyLCBsYSBUSVJBIGRlbCBwcm95ZWN0byBlcyA4Ljg1ICUsIGxvIHF1ZSBzaWduaWZpY2EgcXVlLCBzaSBsYSB0YXNhIGRlIGRlc2N1ZW50byBkZSBsYSBlbXByZXNhIGVzIG1lbm9yIGEgZXN0ZSB2YWxvciwgZWwgcHJveWVjdG8gZXMgcmVudGFibGUuCgoKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmFjdGl2aWRhZC5iZy1jb2xvci1hY3RpdmlkYWQKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAjQWN0aXZpZGFkICAgICAgICAgICAgICAgIAogICAgICAgICAgPEFjdGl2aWRhZCA6Y3Vlc3Rpb25hcmlvPSJjdWVzdGlvbmFyaW8iLz4KCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy82OTIwMyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEd1dGnDqXJyZXogQ2FybW9uYSwgSi4gKDIwMTIpLiBNYXRlbcOhdGljYXMgZmluYW5jaWVyYXM6IGNvbiBmw7NybXVsYXMsIGNhbGN1bGFkb3JhIGZpbmFuY2llcmEgeSBFeGNlbDogKCBlZC4pLiBFY29lIEVkaWNpb25lcy4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy81MTUxNiIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEFjaGluZyBHdXptw6FuLCBDLiAoMjAxNSkuIEd1w61hIHLDoXBpZGE6IGFwbGljYWNpb25lcyBmaW5hbmNpZXJhcyBkZSBleGNlbCBjb24gbWF0ZW3DoXRpY2FzIGZpbmFuY2llcmFzOiAoIGVkLikuIEVsIENpZCBFZGl0b3IuICAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZXMtZXMvb2ZmaWNlL2Z1bmNpb25lcy1maW5hbmNpZXJhcy1yZWZlcmVuY2lhLTU2NThkODFlLTYwMzUtNGYyNC04OWMxLWZiZjEyNGMyYjFkOCAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNaWNyb3NvZnQuIChuLmQuKS4gRnVuY2lvbmVzIGZpbmFuY2llcmFzIChyZWZlcmVuY2lhKS4gU29wb3J0ZSB0w6ljbmljbyBkZSBNaWNyb3NvZnQuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2Zvcm1hZG9yZXNpdC5lcy9sYXMtcHJpbmNpcGFsZXMtZnVuY2lvbmVzLWZpbmFuY2llcmFzLWRlLWV4Y2VsLyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBGb3JtYWRvcmVzIElULiAobi5kLikuIExhcyBwcmluY2lwYWxlcyBmdW5jaW9uZXMgZmluYW5jaWVyYXMgZGUgRXhjZWwuICAKCiAgICAgICAgICAgIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1BcDNJa1ZlSDJLYyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBMdXogQ2FzdGVsbGFub3MgRHVxdWUuICgyMDE2LCAxNSBkZSBtYXJ6bykuIEPDoWxjdWxvIGRlIGxhIFRJUiBbVsOtZGVvXS4gWW91VHViZS4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU5PN2xVQjl1SjhBIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTWlzIEZpbmFuemFzIFUuICgyMDE5ZywgMTYgZGUgc2VwdGllbWJyZSkuIMK/Q8OzbW8gcHJvZ3JhbWFyIHVuIGFob3JybyBvIGludmVyc2nDs24gZW4gRXhjZWw/IFtWw61kZW9dLiBZb3VUdWJlLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9SE1HMjFqUWdyLUUgIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTWlzIEZpbmFuemFzIFUuICgyMDE5ZCwgOSBkZSBzZXB0aWVtYnJlKS4gwr9Dw7NtbyBjcmVhciB1bmEgdGFibGEgZGUgYW1vcnRpemFjacOzbiBkZSBjdW90YSBmaWphPyBbVsOtZGVvXS4gWW91VHViZS4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTJOVGd3SVltZDJ3ICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFVuaXZlcnNpZGFkIENvbnRpbmVudGFsIC0gTW9kYWxpZGFkIGEgRGlzdGFuY2lhLiAoMjAyMSwgMiBkZSBkaWNpZW1icmUpLiBFamVyY2ljaW9zIGRlIGFwbGljYWNpw7NuIGRlIG1hdGVtw6F0aWNhcyBmaW5hbmNpZXJhcyBbVsOtZGVvXS4gWW91VHViZS4gCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCiAgCg=="},null]}